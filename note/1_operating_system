-----------------------------------------------------------------------------
Operting systems need to play three roles:
	Referree:since the applications share physical resources, the operating system needs to decide which applications get which resources and when.
	Illusionist:operating systems provide the illusion of nearly infinite memory.they provide the illusion that each program has the computer's processors entirely to itself.
	Glue:
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
The Process Abstraction:
	What is a process and how does it differ from a program?
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
Dual-Mode Operation:
	What hardware enable the operating system to efficiently implement the process abstration?

Using physically addressed base and bound registers can provide protection, but this does not provide some important features:
G0.Expandable heap and stack;
G1.Memory sharing;
G2.Physical memory addresses;
	Sinece a program may be loaded at different locations depending on what othe programs are running at the same time, the kernel must change every instruction and data locationg that refers to a global address, each time the program is loaded into memory.
G3.Memory fragmentation.

For these reasons, most modern processors introduce a level of indirection called virtual addresses.
Virtual addresses can also let the heap and the stack start at separate ends of the virtual address space so they can grow according to program need.
	the operating system can move it to different larger region in physical memory but leave it at the same virtual address.
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
Types of Mode Transfer:
	What causes the processor to switch control from a use-level program the kernel?

User to Kernel Mode
	There are three reasons for the kernel to take control from a user process:
		Interrupts: occur asynchronously -- they are triggered by an external event. On a multiprocessor, an interrupt is taken on only one of the processors; the others continue to execute as if nothing happened.A processor can send an interrupt to any other processor.The kernel uses these interrupts to coordinate actions across the multiprocessor.
		Processor exceptions (which is named fault in csapp): synchronous events -- On a multiprocessor,the exception only stops execution on the processor triggering the exception; the kernel then needs to send interprocessor interrupts to stop execution of parallel program on other processors.
		System calls: synchronous events -- To protect the kernel from misbehaving user programs, it is essential that the hardware transfers control on a system call to a pre-defined address -- user processes cannot be allowed to jump to arbitrary places in the kernel.


Case: to set a breakpoint in a program, the kernel replaces the machine instruction in memory with a special instruction that invokes a trap. When the program reaches that point in its exection, the hardware switches into kernel mode. The kernel restores the old instruction and transfers control to the debugger. The debugger can then examine the program's variables, set a new breakpoint, and resume the program at the instruction causing the exception.
Case: Processor exceptions are a particularly powerful tool for virtualization

Kernel to User Mode
	New process.
	Resume after an interrupt, processor exception, or system call. -- When the kernel finishes handling the request, it resumes execution of the interrupted process by restoring it program counter, restoring its registers, and changing the mode back to user level.
	Switch to a different process.
	User-level upcall.
-----------------------------------------------------------------------------




-----------------------------------------------------------------------------
Implementing Safe Mode Transfer:
	How do we safely switch between user level and the kernel?

Interrupt Vector Table
	the processor has a special register that points to an area of kernel memory called the interrupt vector table.
	the  interrupt vector table is an array of pointers, with each entry pointing to the first instruction of a different handler procedure in the kernel.

Interrupt Stack
	You might think you could use the process's user-level stack to store its state. However, a separate, kernel-level interrupt stack is needed for two reasons.
	Reliablility.The process's user-level stack pointer might not ba a valid memory address, but the kernel handler must continue to work properly.
	Security.On a multiprocessor, other threads running in the same process can modify user memory during the system call. If the kernel handler stores its local variables on the user-level stack, the user program might be able to modify the kernel's return address, potentially causing the kernel to jump toarbitrary code.

Caseï¼šOn a multiprocessor, each processor needs to have its own interrupt stack so that, for example, the kernel can handle simultaneous system calls and exceptions across multiple processors. For each processor, the kernel allocates a separate region of memory as that processor's interrupt stack.

Two Stacks per Process
	Most operating system kernel go one step farther and allocate a kernel interupt stack for every user-level process.

	If the process is running on the processor in user mode, its kernel stack is empty, ready to be used for an interrupt, processor exception, or system call.
	If the process is running on the processor in kernel mode its kernel stack is in use, containing the saved registers from the suspended user-level computation as well as the current state of the kerel handler.
	If the process is available to run but is waiting for its turn on the processor, its kernel stack contains the registers and state to be restored when the process is resumed.
	If the process is waiting for an I/O event to complete, its kernel stack contains the suspended computation to be resumed when the I/O finishes.

If the processor takes an interrupt in kernel mode with interrupts enabled, it is safe to use the current stack pointer rather than resetting it to the base of the interrupt stack. This approach can recursively push a series of handlers' states onto the stack.

Case:Most modern processors with deep execution pipelines, such as the x86, instead provide precise interrupts: the hardware first completes all instructions that occur, in program order, before the interrupted instruction.
-----------------------------------------------------------------------------



-----------------------------------------------------------------------------
Putting It All Together: x86 Mode Transfer: What happens on an x86 mode switch?
1. Mask interrupts.
2. Save three key values.
3. Switch onto the kernel interrupt stack.
4. Push the three key values onto the new stack.
5. Optionally save an error code. Certain types of exceptions, such as page faults, generate an error code to provide more information about the event;for these exceptions, the hardware pushes this code, making it the top item on the stack.
6.Invoke the interrupt handler. Finally, the hardware changes the code segment/program counter to the address of the interrupt handler procedure.A special register in the processor contains the location of the interrupt vector table in kernel memory.

The kernel's interrupt stack holds (1) the stack pointer, execution flags, and program count saved by the hardware,(2) an error code or dummy value, and (3) a copy of all of the general registers (including the stack pointer but not the instruction pointer or eflags register).
-----------------------------------------------------------------------------



-----------------------------------------------------------------------------
Implementing Secure System Calls. How do library code and the kernel work together to implement protected procedure calls from the application into the kernel?

The sequence of steps involved in a system call:
	1. The user program calls the user stub in the normal way, oblibious to the fact the implementation of the procedure is in fact in the kernel.	
	2. The user stub fills in the code for the system call and executes the trap instruction.
	3. The hardware transfers control to the kernel, vectoring to the system call handler.The handler acts as a stub on the kernel side, copying and checking arguments and then calling the kernel implementation of system call.
	4. After the system call completes, it returns to the handler. 
	5. The handler returns to user level at the next instruction in the stub.
	6. The stub returns to the caller.

int KernelStub_Open(){
	char *locaTCopy[MaxFileNameSize + 1];
	Check that the stack pointer is valid and that the arguments are s valid addrresses.
	if (!validUserAddressRange(userStackPointer, userStackPointer + s))
		return error_code;
	Fetch pointer to file name from user stack and convert it to a kerner addresses.
		filename = VirtualToKernel(userStackPointer);
	Make a local copy of the filename. This prevents the application
	from changing the name surreptitiously.
	The string copy needs to check each address in the string before use
	it is valid.
	The string copy terminates after it copies MaxFileNameSize to ensure
	do not overwrite our internal buffer.
		if(!VirtualToKernelStringCopy(filename,localCopy,MaxFileNameSize))
			return error_code;
	Make sure the local copy of the file name is null terminated.
		localCopy[MaxFileNameSize] = 0;
	Check if the user is permitted to access this file.
		if(!UserFileAccessPermitted(localCopy,current_process))
			return error_code;
	Finally, call the actual routine to open the file. This returns a
	handle on success, or an error code on failure.
		return Kernel_Open(localCopy);
}

-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Starting a New Process. How does the operating system kernel start a new process?
The kernel must:
	1. Allocate and initialize the process control block.
	2. Allocate memory for the process.
	3. Copy the program from disk into the newly allocated memory.
	4. Allocate a user-level stack for handling system calls, interrupts and processor exceptions.

To start running the program, the kernel must also:
	1. Copy arguments into user memory.
		Case: when you click on a file icon in MacOS or Windows, the window manager
		asks the kernel to start the appliction associated with the file, passing it
		the file name to open. The kernel copies the file name from the memory of the
		window manager process to a special region of memory in the new process.
	2. Transfer control to user mode.
	   most operating system re-use same code to exit the kernel for starting a new process
	   and for returning from a system call.
	   Case: when we create the new process, we allocate a kernel stack to it, and we reserve
	   room at the bottom of the kernel stack for the initial values of its use-space registers
	   , program counter, stack pointer, and processor status word.To start the new program, we
	   can then switch to the new stack and jump to the end of the interrupt handler. When the
	   handle executes popad and iret, the processor "return" to the start of the user program.

-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Implementing Upcalls. How does the operating system kernel deliver an asynchronous event to a user process?
For many of the reasons that kernel need interrupt-based event delivery, applications can also
benefit from being told when events occur that need their immediate attention.
In UNIX, they are called signals; in Windows, they are asynchronous events.

These are several uses for immediate event delivery with upcalls:
	Preemptive user-level thrads.
		A user-level thread package can use a periodic timer upcall as a trigger to
		switch tasks, to share the processor more evenly among user-level tasks or 
		to stop a runaway task.
	Asynchronous I/O notification. 
		a system call starts the request and returns immediately. Later, the appliction can
		poll the kernel for I/O completion, or a separate notification can be sent via an 
		upcall to the application when the I/O completes.
	Interprocess communication.
		A kernel upcall is needed if a process generates an event that needs the instant 
		attention of another process.
	User-level exception handling.
		many applications have their own exception handling routines, e.g., to ensure that
		files are saved before the application shuts down. For this, the operating system
		needs to inform the application when it receives a processor exception so the 
		appliction runtime, rather than the kernel, handles the event.
	User-level resource allocation.
		the operating system must inform the process when its allocation change, e.g.,
		because some other process needs more or less memory.
	
UNIX signals share many similarities with hardware interrupts
		Types of signals.
			In place of hardware-defined interrupts and precessor exceptions, the kernel define
			a limited number of signal types that a process can receive.
		Handlers.
			Each process defines its own handlers for each signal type, much as the kernel
			defines its own interrupt vector table. If a process does not define a handler
			for a specific signal, then the kerenl calls a default handler instead.
		Signal Stack.
			Applications have the option to run UNIX signal handlers on the process's normal 
			execution stack or on a special signal stack allocated by the user process in 
			user process in user memory.
		Signal masking.
			UNIX also provides a system call for applications to mask signals as needed.
			UNIX defers signals for events that occur while the signal handler for those
			types of events is in progress. Instead, the signal is delivered once the 
			handler returns to the kernel.
		Processor state. 
			The kernel copies onto the signal stack the saved state of the program counter,
			stack pointer, and general-purpose registers at the point when the program stopped.

Case: on a timer interrupt, the hardware and the kernel handler save the state of the state of
the user-level computation. To deliver the timer interrupt to user level, the kernle copies
that saved state to the bottom of the signal stack, tesets the saved state to point to the 
signal handler and signal stack, and then exits the kernel handler. When the signal handler
returns, these steps are unwound: the processor state is copied back from the signal handler
into kernel memory, and the iret returns to the original computation.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Case Study: Booting an OS Kernel. What steps are needed to start running an operating system kernel, to the point where it can create a process?
When a computer boots, it sets the machine's program counter to start executing at a
pre-determined position in memory.

The BIOS reads a fixed-size block of bytes from a fixed position on disk into memory.
This block of bytes is called the bootloader. Once the BIOS has copied the bootloader
into memory, it jumps to the first instruction in the block.
The bootloader in turn loads the kernel into memory and jumps to it.
The kernel's executable image is stored in the file system.
Thus, to find the bootloader, the BIOS needs to read a block of raw from disk;
the bootloader, in turn, needs to know how to read from the file system to find and read 
the operating system image.

-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
Case Study: Virtual Machines. Can an operating system run inside a process?

-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
					The Programming Interface
-----------------------------------------------------------------------------

What functions do we need an operating system to provide applictions?

Process management.
	Can a program create an instance of another program? Wait for it to complete?
	Wait for it to complete?
	Stop or resume another running program?
	Send it an asynchronous event?
	
Input/output.
	How do processes communicate with devices attached to the computer and through them
	to the physical world?
	Can processes communicate with each other?

Thread management.
	Can we create multiple activities or threads that share memory or other resources within a
	process?
	Can we stop and start threads?
	How do we synchronize their use of shared data structures?

Memory management.
	Can a process ask for more (or less) memory space?
	Can it share the same physical memory region with other processes?

File systems and storage.
	How does a process store the user's data persistently so that it can survive machine
	crashes and disk failures?
	How does the user name and organize their data?

Networking and distributed systems.
	How do processes communicate with processes on other computers?
	How do processes on different computers coordinate their actions despite machine crashes
	and network problems?

Graphics and window management.
	How does a process control pixels on its portion of the screen?
	How does a process make use of graphics accelerators?

Authentication and security.
	What permissions does a user or a program have, and how are these permissions kept
	up to date?
	On what basis do we know the user is who they say they are?
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
3.1 Process Management. What is the system call interface for process management?

One approach to process management is to just add a system call to create a 
process, and other system calls for other proce operations.

UNIX Process Management
UNIX splits Create Process in two steps, called fork and exec.
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
3.2 Input/Output

All device I/O, file operations, and interporcess communication use the same set
of system calls: open,close,read and write.

Open before use. Before an application does I/O, it must first call open on the
device, file, or communication channel. This gives the operating system a chance to 
check access permissions and to set up any internal bookkeeping.

Byte-oriented.All devices,even those that transfer fixed-size blocks of data,
are accessed with byte arrays. Similarly, file and communication channel access is 
in terms of bytes, even though we store data structures in file and send data structures
acress channels.

Kerenel-buffered reads. Stream data, such as from the network of keyboard, is stored in
a kernel buffer and returned to the application on request. This allows the UNIX system
call read interface to be the same for devices with streaming reads as those withe block
reads.

Kerenel-buffered writes. outgoing data is stored in a kernel buffer for transmission when
the device becoms available.This decouples the application from the device, allowing each
to go at its own speed.

Explicit close. When an applicetion is done with the device or file, it calls close.
This signals to the operationg system that it can decrement the reference-count on the device,
and grabage collect any unused kernel data structures.

For interporcess communication, we need a few more concepts:

Pipes. A UNIX pipe is a kernel buffer with two file descriptors, one for writing
(to put data into the pipe) and one for reading(to pull data out of the pipe). The pipe 
terminates when either endpoint  closes the pipe or exits. The Intnet has a similar facility
to UNIX pipes called TCP(Transmission Control Protocol).

Replace file descriptor. By manipulating the file descriptors of the child process, the shell
can cause the child to read its input from, or send its output to, a file or a pipe instead of 
from a key board or to the screen. This way, the child process does not need to be aware of who
is providing or consuming its I/O. The shell does this redirection using a special system call
name dup2(from,to) that replaces the to file descriptor with a copy of the from file descriptor.

Wait for multiple reads.Read will block if there is no data to be read, and it world be 
inefficient for the server to poll each pipe in turn to check if there is work for it to do.
The UNIX system call select(fd[],number) addresses this. Select allows the server to wait for
input from any of a set of file descriptors; it returns the file descriptor that has data.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------	
				Creating and managing processes
-----------------------------------------------------------------------------
fork()	Create a child process as a clone of the current process.
		The for call returns to both the parent and child.

exec(prog,args)	Run the application prog in the current process.

exit()	Tell the kernel the current process is complete,and its data structures
		should be garbage collected.

wait(processID)	Pause until the child process has exited.

signal(processID,type) Send an interrupt of a specified type to process.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------	
					I/O operations
-----------------------------------------------------------------------------
fileDesc open(name) Open a file,channel, or hardware device, specified by name;
					return a file descriptor that can be used by other calls.

pipe(fileDesc[2]) between two processes. Pipe returns two file descriptors,
				  one for reading and one for writing.

dup2(fromFileDesc,toFileDesc) Replace the toFileDesc file descriptor with a copy of
							  fromFileDesc. Used for replacing stdin or stdout or both
							  in a child process before calling exec.

int rad(fileDesc,buffer,size) Read up to size bytes into buffer, from the file, channel,
							  or device. Read return the number of bytes actually read.
							  For treaming devices this will often be less than size.
							  For example, a read from the keyboard device will return 
							  all of its queued bytes.

int write(fileDesc,buffer,size) Analogous to read, write up to size bytes into kerenl
								output buffer for a file, channel, or device. Write 
								normally returns immediately but may stall if there is
								no space in the kernel buffer.

fileDesc select(fileDesc[],arraySize) Return when any of the file descriptors in the array
									  fileDesc[] have data available to be read. Returns the
									  file descriptor that has data pending.

close(fileDescriptor) Tell the kernel the process is done with this file,channel,or device.
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
Case Study:Implementing a Shell

The process that creates the shell is responsible for providing it an open file descriptor
for reading commands for its input,called stdin and for writing outpu,called stdout.

Because the commands to read and write to an open file descriptor are the same whether the file
descriptor represents a keyboard,screen,file,device, or pipe, UNIX programs do not need to be
aware of where their input is coming from, or where their output is going. This is helpful in a
number of ways:

A program can be a file of commands.Programs are normally a set of machine instructions, but 
on UNIX a program can be a file containing a list of commands for a shell to interpret.
shell programs signified in UNIX by putting "#! interpreter" as the first line of the file,
where "interpreter" is the name of the shell executable.

A program can send its output to a file. By changing the stdout file descriptor in the child,
the shell can redirect the child's output to a file. After the fork and before the exec, the
shell can replace the stdout file descriptor for the child using dup2. Because the parent has
been cloned, changing stdout for the child has no effect on the parent.

A program can read its input from a file. Likewise, by using dup2 to change the stdin file
descriptor, the shell can cause the child to read its input from a file.

The output of one program can be the input to another program. The shell can use a pipe to 
connect two programs together, so that the output of one is the input of another. 
e.g "cpp file.c | cpare | cgen | as > file.o"
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
Case Study: Interprocess Communication
Three widely used forms of interprocess communication are:
	Producer-consumer:
		Communication is one-way: the producer only writes, and the consumer only reads.
		This allows chaining:a consumer can be, in turn , a producer for a different process.
		Much of the sucess of UNIX was due to its ability to easily compose many different 
		programs together in this fashion.
	Client-server:
		The server implements some specialized task,such as managing the printer queue or 
		managing the display. Clients send requests to the server to do some task, and when
		the operation is complete, the server replies back to the client.
	File system:
		Another way programs can be connected together is through reading and writing files.
		A key distinction is that, unlike the first two modes, communication through the 
		file system can be separated in time.Therefore, data needs to be stored persistently
		on disk or other stable storage, and the data needs to be named so that you can find
		the file when needed later on.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Producer-Consumer Communication
As one process cmputers and produces a stream of output data, it issues a sequence of write
system calls on the pipe into the kernel.Each write can be of variable size. Assuming there
is room in the kernel buffer, the kernel copies the data into the buffer, and returns 
immediately back to the producer.
The kernel buffer allows each process to run at its own pace.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Client-Server Communication
Instead of a single pipe, we create two,one for each direction. To make a request, the client
writes the data into one pipe, and reads the response from the other. The server does the
oppsite: it reads requests from the first pipe, performs whatever is requested, and writes the
response onto the second pipe.

Client:
	char request[RequestSize];
	char reply[ReplySize];

	//..compute..

	// put the request into the buffer.

	// Send the buffer to the server.
	write(output, request, RequestSize);

	// Wait for response
	read(input, reply, ReplySize);

	// ..compute..

Server:
	char request[RequstSize];
	char reply[ReplySize];

	// Loop waiting for requests.
	while(1){
		// Read incoming command.
		read(input, request, RequestSize);

		// Do operation.

		// Send result.
		write(output,reply,ReplySize);
	}
Frequently, we want to allow many clients to talk to the same server.
For this, the server uses the select system call to identify the pipe containing the request.
Server:
	char request[RequstSize];
	char reply[ReplySize];
	FileDescriptor clientInput[NumClients];
	FileDescriptor clientOutput[NumClients];

	// Loop waiting for requests.
	while(fd = select(clientInput, NumClients)){
		// Read incoming command.
		read(clientInput[fd], request, RequestSize);

		// Do operation.

		// Send result.
		write(clientoutput[fd],reply,ReplySize);
	}

How can we improve its performance?
One step is to recognize that both the client and the server issue a write immediately followed
by a read, to wait for the other side to reply; at the cost of adding a system call, these can
be combined to eliminate two kernel crossings per round trip.
Further, the client will always need to wait for the server, so it makes sense for it to donate
its processor to run the server code, reducing delay.
On a multicore system, it is possible or even likely that both the client and server each have
their own processor.If the kernel sets up a shared memory region accessible to both the client 
and the server and no other processes, then the client and server can pass requests and replies
back and forth,as fast as the memory system will allow, without ever traversing into the kernel
or relinquishing their processors.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Operating System Structure

Many parts of the operating system depend on synchronization primitives for coordinating
access to shared data structures with the kernel.

The virtual memory system depends on low-level hardware support for  address translation,
support that is specific to a particular processor architecture.

Both the file system and the virtual memory system share a common pool of blocks of 
physical memory.They also both depend on the disk device driver.

The file system can depend on the network protocol stack if the disk is physically located on
a different machine.

-----------------------------------------------------------------------------
Two common themes emerge across systems:
	to improve protability, almost all modern operating systems have both a
	hardware abstraction layer and dynamically loaded device drivers.
-----------------------------------------------------------------------------
Hardware Abstraction Layer
Case: Windows has a two-pronged strategy for portability. To allow the same Windows kernel
binary to be used across personal computers manufacture by different vendors, the kernel is
dynamically linked at boot time with a set of library routines specifically written for each
hardware configuration.This isolates the kernel from the specifics of the motherboard hardware.

Windows also runs across a number of different processor architectures.Typically, a different
kernel binary is produced for each type of processor,with any neeed processor-specific code;
sometimes, conditional execution is used to allow a kernel binary to be shared across closely
related processor designs.
-----------------------------------------------------------------------------
Dynamically Installed Device Drivers

The operating system boots with a small number of devices -- e.g.,for the disk (to read the 
operating system binary into memory). For the devices physically attached to the computer, the
computer manufacturer bundles those drivers into a file it stores along with the bootloader.
When the operating system starts up, it queries the I/O bus for which devices are attached to
the computer and then loads those drivers from the file on disk.

While dynamically loadable device drivers solve one proble, they pose a different one.

Operating system developers have taken five approaches to dealing with this issue:

Code inspection.Operating system vendors typically require all device driver code to be
submitted in advance for inspection and testing,before being allowed into the kernel.

Bug tracking. After every system crash, the operating system can collect information about the
system configuration and the current kernel stack,and sends this information back to a central
database for analysis.

User-level device drivers.Both Apple and Microsoft strongly encourage new device drivers to
run at user-level rather than in the kernel.

An alternative to the monolithic kernel approach is to run as much of the operating system as
possible in one or more user-level servers. The window manager on most operating systems works
this way: individual applications draw items on their portion of the screen by sending requests
to the window manager. The window manager adjudicates which application window is in front or
in back for each pixel on the screen,and then renders the result. If the system has hardware
graphics accelerator present, the window manger can use it to render items more quickly.Some
systems have moved other parts of the operating system into user-level servers:the network
stack,the file system,device drivers,and so forth.

The location of the service can be hidden in a user-level library -- calls go to the library,
while casts the requests either as system calls or as reads and writes to the server through
a pipe. 
The location of the the server can also be hidden inside the kernel -- the application calls
the kernel as if the kernel implements the service, but instead the kernel reformats the
request into a pipe that the server can read.

Most systems adopt a hybrid model where some operating system services are run at user-level
and some are in the kernel, depending on the specific tradeoff between code complexity and
performance.
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
Summary and Future Directions
Operating systems use the system system call interface to provide services to applications and
to aid in the internal structuring of the operating system itself. Almost all general-purpose
computer systems today have a user-level shell and/or a window manager that can start and 
manage applications on behalf of the user. Many systems also implement part of the operating
system as user-level services accessed through kernel pipes.
-----------------------------------------------------------------------------
