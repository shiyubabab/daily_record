													Memory Hierarchy

	Regs
	L1 cache (SRAM)
	L2 cache (SRAM)
	L3 cache (SRAM)
	Main memory (SRAM)
	Loacl secondary memory (loacl disk)
	Remote secondary storage (distributed file systems, Web serverrs)

Ramdom Access Memory
	Static RAM (SRAM) : L1 Cache / L2 Cache / L3 Cache / TLB
		双稳态: 由六个晶体管构成
		Stable left | Unstable | Stable right
	Dynamic RAM (DRAM) : Memory
		一个电容+一个晶体管构成


Intel Core i7 Cache Hierarchy
-------------------------------------------------------------------------
Cache type  Access time  Cache size(C)  Assoc.(E)  Block Size(B)  Sets(S)
-------------------------------------------------------------------------
L1 i-cache      4			32KB			8			64B			64
L1 d-cache      4			32KB			8			64B			64
L2 cache       10			256KB			8			64B			512
L3 cache      4075			8MB			    16			64B			8192
-------------------------------------------------------------------------



														Linking

Pre-processor(cpp)->Compiler(ccl)->Assembler(as)->Linker(ld)

Build large programs.
Aviod dangerous programming errors.
Understand how language scoping rules.
Understand other important systems concept.
Exploit shared libraries.

preprocessor:
	gcc -E -o main.i main.c
compiler:
	gcc -S -o main.s main.i
assembler:
	as -o main.o main.s
Compile and assemble, but do not link:
	gcc -c main.c

Relocatable Object Files
	gcc -c main.c

|--------|-----------|--------------|
|  ELF   |  Sections | Section      |
| header |			 | header table |
|--------|-----------|--------------|
		 
ELF: Executable and Linkable Format.(可执行可链接格式)

readelf -h main.o

ELF Header: Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          696 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           64 (bytes)
  Number of section headers:         13
  Section header string table index: 12


Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
7f:'DEL'
45:'E'
4c:'L'
46:'F'
02:ELF 文件类型 
	0x1 32 bit
	0x2 64 bit
01:字节序
	0x1 小端法
	0x2 大端法
剩下的填充


readelf -S main.o

There are 13 section headers, starting at offset 0x2b8:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       0000000000000039  0000000000000000  AX       0     0     1
  [ 2] .rela.text        RELA             0000000000000000  000001e8
       0000000000000048  0000000000000018   I      10     1     8
  [ 3] .data             PROGBITS         0000000000000000  0000007c
       0000000000000008  0000000000000000  WA       0     0     4
  [ 4] .bss              NOBITS           0000000000000000  00000084
       0000000000000000  0000000000000000  WA       0     0     1
  [ 5] .comment          PROGBITS         0000000000000000  00000084
       000000000000002c  0000000000000001  MS       0     0     1
  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  000000b0
       0000000000000000  0000000000000000           0     0     1
  [ 7] .note.gnu.pr[...] NOTE             0000000000000000  000000b0
       0000000000000020  0000000000000000   A       0     0     8
  [ 8] .eh_frame         PROGBITS         0000000000000000  000000d0
       0000000000000038  0000000000000000   A       0     0     8
  [ 9] .rela.eh_frame    RELA             0000000000000000  00000230
       0000000000000018  0000000000000018   I      10     8     8
  [10] .symtab           SYMTAB           0000000000000000  00000108
       00000000000000c0  0000000000000018          11     6     8
  [11] .strtab           STRTAB           0000000000000000  000001c8
       000000000000001a  0000000000000000           0     0     1
  [12] .shstrtab         STRTAB           0000000000000000  00000248
       000000000000006c  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  D (mbind), l (large), p (processor specific)

		  0x40  0x94  0x9c
|--------|-----|-----|-------|---|--------------|
|  ELF   |	   |	 |.bss or|   |  Section     |
| header |.text|.data|.rodata|...| header table |
|--------|-----|-----|-------|---|--------------|
						|
						|
					.rodata
				---------------------
				printf("hello world")
				switch的跳转表
				---------------------
Other Sections
-------------------------------------------------------------------
Section							Introduction
-------------------------------------------------------------------
.comment		存放的是编译器的版本信息
.symtab			Symbol Table 符号表
.rel.text		Reloction Table 重定位表
.debug			调试信息
.line			原始C程序的行号和.text section中机器指令之间的映射
.strtab			String Table 字符串表
-------------------------------------------------------------------

readelf -s main.o

Symbol table '.symtab' contains 8 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS main.c
     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 .text
     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 .data
     4: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    3 a.1
     5: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    3 b.0
     6: 0000000000000000    57 FUNC    GLOBAL DEFAULT    1 main
     7: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND func

Ndx 描述的是所在的secetion序号，如main的Ndx是1,说明其在.text中
Value 描述的是其所在的section的起始addr，main就是0000,大小是57
Name 为空的表示是section的名字，如.text的Ndx就是1

void func(){
	int a;
}
中的a是在符号表中找不到的，其是由函数stack所管理的

linkerror.c   gcc -c linkerror.c
---------------------------------
		void foo(void);
		int main(){
			foo();

			return 0;
		}
---------------------------------

Linking with Static Libraries
连接器(ld)其实是通过符号表(symtab)来进行连接的
gcc -c addvec.c mulvec.c
ar rcs libvector.a addvec.o mulvec.o
gcc -c main.c
gcc -static -o prog main.o ./libvector.a libc.a
E/文件		U/未定义的符号	 D/已定义符号
main.o			addvec			x y z
				printf			 main
				  |
E/文件		U/未定义的符号	 D/已定义符号
main.o						    x y z
addvec.o						 main
printf.o						addcnt
若要生成prog，就要去查看U中是否还有未定义的符号

look: gcc -static -o prog ./libvector.a main.o  ld will take an error.

Case: 例如foo.c调用libx.a中的函数
	  其中libx.a调用liby.a中的函数
	  然而liby.a又调用了libx.a中的函数
linux>gcc foo.c libx.a liby.a libx.a


Relocation
Relocating sections and symbol definitions
Relocating symbol references within sections

可执行程序和可重定位文件是计算机程序中两个重要的概念。它们之间有着紧密的关系。以下是一些关键点：

可重定位文件：通常是在编译过程中生成的中间文件，例如在C语言编译过程中生成的对象文件（.obj或.o文件）。这些文件包含了程序代码和数据，但它们的地址还不是最终确定的。在链接过程中，可重定位文件会被合并，并分配最终的内存地址。

可执行程序：这是在链接过程结束后生成的最终文件。可执行程序包含了所有必要的代码、数据以及内存地址信息，能够在操作系统上直接运行。可执行程序通常有特定的文件格式，例如Windows上的EXE文件或Linux上的ELF文件。

链接过程：链接过程将多个可重定位文件合并到一起，解析所有的外部符号，并分配最终的内存地址。这个过程生成了最终的可执行程序。链接器会解决各个可重定位文件之间的依赖关系，并确保所有的符号都得到正确的解析。

关系：简单来说，可重定位文件是可执行程序的中间产物。编译器将源代码编译成可重定位文件，而链接器将这些可重定位文件链接成最终的可执行程序。

--------------------------------------------
可执行程序				可重定位条目
--------------------------------------------
ELF header				ELF header
Segment haeader table	.text
.init					.rodata
.text					.data
.rodata					.bss
.data					.symtab
.bss					.rel.text
.symtab					.rel.data
.debug					.debug
.line					.line
.strtab					.strtab
Section header table	Section header table
--------------------------------------------

First Step
		|-----|
		|.text|
main.o	|.data|
		| ... |					|----------|0x400000
		|-----|-----------------|ELF header|
								|   ...    |0x4004d0
								|  .text   |
		|-----|-----------------|  .data   |
		|.text|					|   ...    |
sum.o	|.data|					|----------|
		| ... |
		|-----|

这里的main.o和sum.o就是可重定位文件

Second Step
	00000000000<main>:
	  0: ...
		 ...
	  e: e8 00 00 00 00 callq 13<main+13>
		 ...

Relocation Entries
	typedef struct{
		long offset;		R_X86_64_PC32(PC相对地址)
		long type:32, ----->R_X86_64_32(绝对地址)
			 symbol:32;
		long addend;
	}ELF64_Rela;


	00000000000<main>:
	  0: ...									r.offset=0xf
	  9: bf 00 00 00 00 mov $0x0,%edi			r.symbol=sum 
						a: R_X86_64_32 array    r.type=R_X86_64_PC32
 4004d9: bf 18 10 60 00 mov $0x601018,%edi
	  e: e8 00 00 00 00 callq 13<main+13>		r.addend=-4
						f: R_X86_64_PC32 sum
 4004de: e8 50 00 00 00 callq 4004e8<sum>
 4004e3: 48 83 c4 08	add $0x8,%rsp
		 ...
						
						ref_addr=ADDR(main)+r.offset
								=0x4004d0 + 0xf
								=0x400fdf
						*ref_ptr=ADDR(sum)+r.offset+r.addend
								=0x4004e8-0x400fdf+(-4)
								=0x5

		1. Push PC onto Stack
		2. PC <- PC + 0x5 = 0x4004e3 + 0x5 = 0x4004e8

--------------------------------------------
重定位的本质就是将其中为定义的符号做符号解析
--------------------------------------------
	  9: bf 00 00 00 00 mov $0x0,%edi
					|
 4004d9: bf 18 10 60 00 mov $0x601018,%edi
--------------------------------------------
	  e: e8 00 00 00 00 callq 13<main+13>
					|
 4004de: e8 50 00 00 00 callq 4004e8<sum>
--------------------------------------------


-----------------------------------------------------------
可执行程序				
-----------------------------------------------------------
ELF header				
Segment haeader table	
.init					
.text				
.rodata					Code Segment(代码段,加载进内存)
-----------------------------------------------------------
.data					
.bss					Data Segment(数据段,加载进内存)
-----------------------------------------------------------
.symtab				
.debug					
.line				 
.strtab					Symbol table
Section header table    and debug info(不会加载进内存)
-----------------------------------------------------------


----------------------------------------------
Program Header Table
----------------------------------------------
Read-only code segment
 LOAD off		vaddr		paddr
   filesz		memsz		align    flags r-x

Read/Write data segment
      off		vaddr		paddr
   filesz		memsz		align    flags r-x
----------------------------------------------

加载：
	_start()			ctrl.o   .init
	    |
_libc_start_main()		libc.so
		|
	  main()			prog
		|
_libc_start_main()		libc.so
		|
	Linux Kernel

Shared Libraries	linux .so	windows .dll
linux> gcc -shared -fpic -o libvector.so addvec.c mulvec.c
 -fpic : postion indepent code
linux> gcc -o prog2 main.c ./libvector.so

Dynamic Linking
Relocating the text and data of libc.so into some memory segment
Relocating the text and data of libvector.so int another memmory segment
Relocating any reference in prog2 to symbols defined by libc.so and libvector.so


main.c	 vector.h
  |			|
|---------------|
|  Translators	|
|  (cpp,ccl,as)	|		libc.so
|---------------|	  libvector.so
		|					| Relocation and Symbol table
	|------------------------------|
	|		  Linker(ld)		   |
	|------------------------------|
		|
	  prog2
		|
	|----------------|
	| Loader(execve) |	libc.so
	|----------------| libvector.so
		|					|
	|------------------------------|
	| Dynamic Linker(ld-linux.so)  |
	|------------------------------|

------------------------------------------------
Interface to Dynamic Linker
------------------------------------------------
void *dlopen(const char *filename,int flag);
	handle = dlopen("./libvector.so",RTLD_LAZY):
------------------------------------------------
void *dlsym(void *handle, char *symbol);
	addvec = dlsym(handle,"addvec");
	addvec(x,y,z,2);
------------------------------------------------
int dlclose(void *handle);
	dlclose(handle);
------------------------------------------------
Distributing software
	windows更新，分发的dll文件在下一次开机时替换
Building high-performance Web Server
------------------------------------------------



													Exceptional Control Flow

------------------------------------------------------------------
whay we need to learn exceptional control flow
------------------------------------------------------------------
help you understand important systens concepts. (进程 虚拟内存 IO)
------------------------------------------------------------------
how applications interact with the operating system. (shell)
------------------------------------------------------------------
write interesting new application programs
------------------------------------------------------------------
help you understand concurrency
------------------------------------------------------------------
understand how software exceptions work
------------------------------------------------------------------

				Application
				  program
				     |
					 |		Exception
	Event ------Icurr|------------------|
   occurs								|Excption
										|processing
					 |Inext-------------|
					 |		Exception
					 |		  return
					 |		(optional)
					 |

Exception Handing
												Exception table
										  |------------------------------|		
										0 | Code for exception handler 0 |
					Exception			1 | Code for exception handler 1 |
					 number				2 | Code for exception handler 2 |
						|		  |----	3 | Code for exception handler 3 |
						|		  |						...
Exception table ------- + --------|		n | Code for exception handler n |
 base register  						  |------------------------------|		
					 

------------------------------------------------------------------------
Exception vs Procedure Call
------------------------------------------------------------------------
Return current or next instruction
函数调用将call的下一条指令压入stack中，也就是说函数返回执行的是下一条指令
异常处理结束返回是可能执行当前或下一条指令
------------------------------------------------------------------------
Push additional processor state
(处理器状态压入栈中)
------------------------------------------------------------------------
Control transfer from user program to kernel
------------------------------------------------------------------------
Run in kernel mode
------------------------------------------------------------------------

Handle Return
.Returns control to the current instruction
.Return control to the next instruction
.Abort the interrupted program
	(异常处理程序终止程序)

						Classes of Exlceptions (中断 陷阱 故障 终止)
---------------------------------------------------------------------------------------
Class		Cause					Async/Sync(是否在cpu内部)		Return behavior
---------------------------------------------------------------------------------------
Interrupt	Signal from I/O device		  Async		Always returns to next instruction
Trap		Intentional exception		   Sync		Always returns to next instruction
Fault		Potentially recoverable error  Sync		Might return to current instruction
Abort		Nonrecoverable error		   Sync		Never returns
---------------------------------------------------------------------------------------

中断和异常：中断由外部事件导致，异常由内部事件导致
中断由女朋友导致，异常由拉肚子导致，不得不暂停游戏

Traps 陷阱:有意的异常
应用程序执行系统调用：syscall
例如：应用程序需要调用声卡或其他硬件时

Faults 故障：
Case 1：当前cpu要访问一个数据，该数据不在内存里，在硬盘上。这个时候就会导致一个缺页故障。此时操作系统就去将缺的页调入到内存当中，再返回，此时返回执行的就会是current instruction
Case 2:当要去写一个只读文件时就会导致保护故障，此时就不会返回current instruction而是直接abort，也称之为不可恢复的故障

Aborts 终止：
发生致命的硬件错误


Exceptions in Linux/x86-64 Systems
-----------------------------------------------------------------
Exception number	Description					Exception class
-----------------------------------------------------------------
	0				Divide error				Fault
					(除法错误) 除零会报成Floating exception
	13				General protection fault	Fault
					(读写保护故障)
	14				Page fault					Fault
					(缺页故障)
	18				Machine check				Abort
  32-255			OS-defined exceptions		Interrupt or trap
-----------------------------------------------------------------

Linux/x86-64 System Calls
-------------------------------------------------
Number		Name		Description
-------------------------------------------------
 0			read		Read file
 1			write		Write file
 2			open		Open file
 3			close		Close file
 4			stat		Get info about file
 5			mmap		Map memory page to file
 6			brk			Reset the top of the heap
 7			dup2		Copy file descriptor
-------------------------------------------------


------------------------------------------
int main(){
	write(1,"hello, world",13);
	_exit(0);
}
------------------------------------------
main:
	movq $1,%rax	write is system call 1
	movq $1,%rdi
	movq $String,%rsi
	movq $len,%rdx
	syscall

	movq $60,%rax	_exit is systemcall 60
	movq $0,%rdi
	syscall
------------------------------------------

Processes
program has exclusive use of processor
逻辑控制流
program has exclusive use of the memory system
每一个进程所能看到的地址空间都是整个内存的地址空间
|------------------------------|
|		Kernel Memory		   |
|------------------------------|2^48-1
|		 User Stack			   |
|	(created at run time)	   |
|------------------------------|%rsp
|							   |
|							   |
|------------------------------|
|	Memory-mapped region	   |
|	for shared libraries	   |
|------------------------------|
|							   |
|							   |
|------------------------------|brk
|		Run-time heap		   |
|	 (created by malloc)	   |
|------------------------------|
|	  Read/Write segment	   |
|		(.data .bss)		   |
|------------------------------|
|	Read-only code segment	   |
|	(.init .text .rodata)	   |
|------------------------------|0x400000
|							   |
|------------------------------|0

User and Kernel Modes

			Control Register
User mode	----------------	Kernel Mode

Context
general-purpose registers	floating-point registers
progam counter	 user's stack	status register
kernel's stack	 various kernel data structures

Context Switch
Saves the context of the current process (内核栈)
Restores the saved context of some previously preempted process
Passes control to this newly restored process

Process
	Running
		SIGCOUN
	Stopped
		SIGSTOP	SIGTSTP	SIGTTIN	SIGTTOU
	Terminated
		Receiving a signal
		Returning from the main routine
		Calling the exit function

 fork
|-----------------------------------|
|									|
| linux>./hello						|
| hello,world						|
|									| Shell
| linux>							| 父进程
|									|
|									|
|-----------------------------------|

-------------------------
#include<sys/types.h>
#include<unistd.h>

pid_t fork(void);
Call once, return twice
	一次父进程
	一次子进程
-------------------------

-----------------------------------------
int main(){						
	pid_t pid;
	int x = 1;
	pid = fork();

	if(pid == 0){
		printf("child:x=%d\n",++x);
		exit(0);
	}
	printf("parent:x=%d\n",--x);
	exit(0);
}
-----------------------------------------
linux>./fork
parent: x=0
child: x=2
-----------------------------------------

Parent vs Child
Call once return twice
Concurrent execution
Duplicate but separate address spaces
(相同但是独立的地址空间)
Shared files

---------------------------------------------
int main(){
	fork();
	fork();
	prinrf("hello\n");
	exit(0);
}
---------------------------------------------

						hello
				 |------------------------>
				 |		printf			exit
				 |
				 |		hello
		|--------------------------------->
		|		fork 	printf			exit
		|
		|				hello
		|		 |------------------------>
		|		 |		printf			exit
		|		 |		
		|		 |		hello
--------|--------|------------------------>
main   fork		fork	printf			exit

---------------------------------------------

zombie(僵死进程) 该进程已经运行结束了等待回收所占用的资源。此时父进程通过waitpid函数来回收资源
pid_t waitpid(pid_t pid,int *statusp,int options);
	(1) pid > 0
	(2) pid = -1 需要等待所有的子进程来回收
	(3) *statusp : 描述子进程终止的原因
		WIFEXITED(status) exit/return True
		WIFSIGNALED(status)
		WEXITSTATUS(status)
		WIERMSIG(status)
		WIFSTOPPED(status)

execve
#include<unistd.h>
int execve(const char *filename,const char *argv[],const char *envp[]);
Called once,Never return
	(1) ./hello 文件名
	(2) *argv[] 参数列表
	(2) *envp[] 环境变量列表

 fork
|-----------------------------------|
|									|
| linux> ls -lt /home/csapp			|
|									| Shell
|									| 父进程
|									|
|									|
|-----------------------------------|
				   argv[]
argv----------->|------------|
				|   argv[0]  |------> "ls"
				|   argv[1]  |------> "-lt"
				|     ...    |
				|argv[argc-1]|------> "/home/csapp"
				|------------|

				   envp[]
envp----------->|------------|
				|   envp[0]  |------> "PWD=/home/csapp"
				|   envp[1]  |------> "..."
				|     ...    |
				|  envp[n-1] |------> "USER=shiyubabab"
				|------------|
