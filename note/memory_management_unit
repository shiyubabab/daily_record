memory management unit, mmu

==============================================================================================================================================================
单道编程的内存管理：
	整个系统只有一个用户进程和一个操作系统
	缺点：系统无法运行比实际物理内存大的程序。
		  系统只运行一个程序，会造成浪费。
		  程序无法迁移到其他计算机中。

多道编程的内存管理：
	系统可以同时运行多个进程。内存管理中出现了两种内存分配技术。
		固定分区：内存被划分成许多静态分区。
				  缺点：程序大小和分区的大小必须匹配。
						活动进程的数目比较固定。
						地址空间无法增长。
		动态分区：将一整块内存空间中划出一块供操作系统本身使用，剩下的内存空间动态分配给用户进程使用。
				  缺点：内存碎片的产生，需要动态的移动进程来解决这一问题。整个进程的迁移是一个非常耗时的过程。
	无论是固定分区还是动态分区都存在很多问题：
		进程地址空间保护问题。进程之间不能随意的访问对方的内存空间。
		内存使用效率低。即将运行的进程所需的内存空间不足，就需要其他进程的换出换入，效率低下。
		程序运行地址重定位问题。进程的每次换入换出时使用的地址都是不固定的，访问数据和指令的目标地址通常是固定的，故需要使用到重定位技术。
	将虚拟地址空间的概念引入到进程地址空间后，可以解决上面提到的三个问题。
		虚拟内存机制可以提供隔离性，因为每个进程都认为自己拥有整个内存空间，可以随意访问，然后由处理器转换到实际的物理地址。故进程A无法访问进程B的内存空间。
		后来出现的分页机制可以解决动态分区中出现的内存碎片化和效率问题。
		进程的换入换出时访问的地址变成相同的虚拟地址。进程不用关心具体的物理地址。

操作系统的3个元素：
	进程地址空间
	进程的cpu虚拟化
	文件对存储地址空间的抽象
==============================================================================================================================================================

==============================================================================================================================================================
分段机制：把程序所需的内存空间的虚拟地址映射到某个物理地址空间。
	分段机制对虚拟内存到物理内存的映射以进程为单位。
	说白了就是：进程A和进程B会被映射到不同的物理地址空间。一个进程就对应一个段。
	这也就是说当物理内存不足时候，就需要将整个进程进行换入换出，这带来的大量的磁盘访问会导致系统性能的下降。
	根据局部性原理，可以将不常用的数据交换到磁盘，常用的数据驻留到内存中。因此之后出现了分页机制。

分页机制：让程序中一部分不使用的内存可以存放到交换磁盘中，而程序正在使用的内存继续保留到物理内存中。
	虚拟地址空间：处理器能寻址的地址空间，如32位的处理器，其地址范围是0~4GB。
	在使用了分页机制的系统中，处理器直接寻址虚拟地址，该地址发送给内存管理单元（memory management unit，mmu）。mmu将虚拟地址转换和翻译为物理地址后发送给内存
	控制器。
	虚拟地址空间可按照固定大小来分页，常用的分页粒度是4KB。物理内存空间也分成和虚拟地址空间大小相同的块，称为页帧。

每个进程拥有一套属于自己的页表，在切换进程时需要切换页表基地址。如，对于一级页表，每个进程需要为其分配4MB的连续物理内存用于存放页表，这太浪费内存。为此设计了
多级页表来减少页表占用的内存空间。

对于二级页表：当操作系统准备让进程运行时，会设置一级页表在物理内存中的起始地址到页表基地址寄存器中。进程在执行过程中需要访问物理内存，因为一级页表项是空的，
这会触发缺页异常。在缺页异常里分配一个二级页表，并且把二级页表的起始地址填充到一级页表的相应页表项中。接着，分配一个物理页面，然后把这个物理页面的物理页帧号
（Physical Frame Number，PFN）填充到二级页表的对应页表项中。随着进程的执行，需要访问越来越多的物理内存，于是操作系统逐步地把页表填充建立起来。

一个完整的页表翻译和查找的过程叫作页表查询，页表查询的过程由硬件自动完成，但是页表的维护由软件来完成。

进程地址空间在虚拟地址空间内是相互隔离的，但是在物理地址空间可能映射到同一个物理页面。这些进程地址空间需要MMU提供页表映射和管理功能来正确的映射到物理地址空间。

对于多处理器系统，cpu0和cpu1共享物理内存，同时页表存储在物理内存中，故cpu0和cpu1中的MMU和TLB硬件单元也共享同一份页表。当一个cpu修改了页表项时，需要使用
Break-Before-Make机制来保证其他cpu能访问正确和有效的TLB。
==============================================================================================================================================================
